"""
Pytest configuration and fixtures for Lynis Reporter tests
"""

import pytest
import tempfile
import os
from pathlib import Path
from datetime import datetime


@pytest.fixture
def sample_lynis_report_content():
    """Sample Lynis report.dat content for testing"""
    return """# Lynis Report Data
# Generated by Lynis
report_version=1.0
report_datetime_start=2025-10-23 22:10:45
hostname=test-server
os=Linux
os_name=Ubuntu
os_version=22.04
os_fullname=Ubuntu 22.04 LTS
linux_version=5.15.0-84-generic
kernel_version=5.15.0-84-generic
lynis_version=3.0.9
hardening_index=67
lynis_tests_done=265
warnings_count=3
suggestions_count=45
plugins_enabled=2
warning[]=AUTH-9308|No password set for single user mode|Login|-
warning[]=SSH-7408|PermitRootLogin enabled in SSH config|SSH|-
warning[]=KRNL-5820|Kernel version mismatch detected|kernel|-
suggestion[]=AUTH-9286|Install a PAM module for password strength testing|-|-
suggestion[]=SSH-7408|Disable root login in SSH configuration|SSH|-
suggestion[]=FILE-6310|Change permissions on /tmp directory|filesystem|-
suggestion[]=KRNL-5820|Update kernel to latest version|kernel|-
installed_package[]=vim
installed_package[]=curl
installed_package[]=nginx
available_shell[]=/bin/bash
available_shell[]=/bin/sh
available_shell[]=/bin/zsh
"""


@pytest.fixture
def temp_lynis_report_file(sample_lynis_report_content):
    """Create a temporary lynis-report.dat file"""
    with tempfile.NamedTemporaryFile(mode='w', suffix='.dat', delete=False) as f:
        f.write(sample_lynis_report_content)
        temp_path = f.name
    
    yield temp_path
    
    # Cleanup
    if os.path.exists(temp_path):
        os.remove(temp_path)


@pytest.fixture
def sample_parsed_data():
    """Sample parsed data structure for testing"""
    return {
        'system_info': {
            'hostname': 'test-server',
            'os': 'Linux',
            'os_name': 'Ubuntu',
            'os_version': '22.04',
            'os_fullname': 'Ubuntu 22.04 LTS',
            'kernel_version': '5.15.0-84-generic',
            'lynis_version': '3.0.9',
            'report_datetime': '2025-10-23 22:10:45',
            'report_version': '1.0',
            'auditor': '',
        },
        'metrics': {
            'hardening_index': 67,
            'tests_performed': 265,
            'tests_skipped': 0,
            'warnings_count': 3,
            'suggestions_count': 45,
            'plugins_enabled': 2,
        },
        'warnings': [
            {
                'test_id': 'AUTH-9308',
                'message': 'No password set for single user mode',
                'component': 'Login',
                'severity': 'high',
            },
            {
                'test_id': 'SSH-7408',
                'message': 'PermitRootLogin enabled in SSH config',
                'component': 'SSH',
                'severity': 'high',
            },
            {
                'test_id': 'KRNL-5820',
                'message': 'Kernel version mismatch detected',
                'component': 'kernel',
                'severity': 'medium',
            },
        ],
        'suggestions': [
            {
                'test_id': 'AUTH-9286',
                'message': 'Install a PAM module for password strength testing',
                'component': '',
                'priority': 'high',
            },
            {
                'test_id': 'SSH-7408',
                'message': 'Disable root login in SSH configuration',
                'component': 'SSH',
                'priority': 'high',
            },
            {
                'test_id': 'FILE-6310',
                'message': 'Change permissions on /tmp directory',
                'component': 'filesystem',
                'priority': 'high',
            },
            {
                'test_id': 'KRNL-5820',
                'message': 'Update kernel to latest version',
                'component': 'kernel',
                'priority': 'medium',
            },
        ],
        'packages': ['vim', 'curl', 'nginx'],
        'shells': ['/bin/bash', '/bin/sh', '/bin/zsh'],
        'test_results': {},
    }


@pytest.fixture
def temp_db_path():
    """Create a temporary database path for testing"""
    temp_dir = tempfile.mkdtemp()
    db_path = Path(temp_dir) / "test_lynis.db"
    
    yield str(db_path)
    
    # Cleanup
    if db_path.exists():
        db_path.unlink()
    Path(temp_dir).rmdir()


@pytest.fixture
def temp_report_dir():
    """Create a temporary directory for report output"""
    temp_dir = tempfile.mkdtemp()
    
    yield temp_dir
    
    # Cleanup
    import shutil
    if os.path.exists(temp_dir):
        shutil.rmtree(temp_dir)
